/*
 * Copyright 2020 Ren Binden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.rpkit.travel.bukkit.database.jooq.tables;


import com.rpkit.travel.bukkit.database.jooq.RpkitTravel;
import com.rpkit.travel.bukkit.database.jooq.tables.records.RpkitWarpRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitWarp extends TableImpl<RpkitWarpRecord> {

    private static final long serialVersionUID = -1609053879;

    /**
     * The reference instance of <code>rpkit_travel.rpkit_warp</code>
     */
    public static final RpkitWarp RPKIT_WARP = new RpkitWarp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitWarpRecord> getRecordType() {
        return RpkitWarpRecord.class;
    }

    /**
     * The column <code>rpkit_travel.rpkit_warp.name</code>.
     */
    public final TableField<RpkitWarpRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_travel.rpkit_warp.world</code>.
     */
    public final TableField<RpkitWarpRecord, String> WORLD = createField(DSL.name("world"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_travel.rpkit_warp.x</code>.
     */
    public final TableField<RpkitWarpRecord, Double> X = createField(DSL.name("x"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_travel.rpkit_warp.y</code>.
     */
    public final TableField<RpkitWarpRecord, Double> Y = createField(DSL.name("y"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_travel.rpkit_warp.z</code>.
     */
    public final TableField<RpkitWarpRecord, Double> Z = createField(DSL.name("z"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_travel.rpkit_warp.yaw</code>.
     */
    public final TableField<RpkitWarpRecord, Double> YAW = createField(DSL.name("yaw"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>rpkit_travel.rpkit_warp.pitch</code>.
     */
    public final TableField<RpkitWarpRecord, Double> PITCH = createField(DSL.name("pitch"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>rpkit_travel.rpkit_warp</code> table reference
     */
    public RpkitWarp() {
        this(DSL.name("rpkit_warp"), null);
    }

    /**
     * Create an aliased <code>rpkit_travel.rpkit_warp</code> table reference
     */
    public RpkitWarp(String alias) {
        this(DSL.name(alias), RPKIT_WARP);
    }

    /**
     * Create an aliased <code>rpkit_travel.rpkit_warp</code> table reference
     */
    public RpkitWarp(Name alias) {
        this(alias, RPKIT_WARP);
    }

    private RpkitWarp(Name alias, Table<RpkitWarpRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitWarp(Name alias, Table<RpkitWarpRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RpkitWarp(Table<O> child, ForeignKey<O, RpkitWarpRecord> key) {
        super(child, key, RPKIT_WARP);
    }

    @Override
    public Schema getSchema() {
        return RpkitTravel.RPKIT_TRAVEL;
    }

    @Override
    public RpkitWarp as(String alias) {
        return new RpkitWarp(DSL.name(alias), this);
    }

    @Override
    public RpkitWarp as(Name alias) {
        return new RpkitWarp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitWarp rename(String name) {
        return new RpkitWarp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitWarp rename(Name name) {
        return new RpkitWarp(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, Double, Double, Double, Double, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
