/*
 * Copyright 2020 Ren Binden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.rpkit.stores.bukkit.database.jooq.tables;


import com.rpkit.stores.bukkit.database.jooq.Keys;
import com.rpkit.stores.bukkit.database.jooq.RpkitStores;
import com.rpkit.stores.bukkit.database.jooq.tables.records.RpkitPermanentStoreItemRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitPermanentStoreItem extends TableImpl<RpkitPermanentStoreItemRecord> {

    private static final long serialVersionUID = 1630577424;

    /**
     * The reference instance of <code>rpkit_stores.rpkit_permanent_store_item</code>
     */
    public static final RpkitPermanentStoreItem RPKIT_PERMANENT_STORE_ITEM = new RpkitPermanentStoreItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitPermanentStoreItemRecord> getRecordType() {
        return RpkitPermanentStoreItemRecord.class;
    }

    /**
     * The column <code>rpkit_stores.rpkit_permanent_store_item.id</code>.
     */
    public final TableField<RpkitPermanentStoreItemRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rpkit_stores.rpkit_permanent_store_item.store_item_id</code>.
     */
    public final TableField<RpkitPermanentStoreItemRecord, Integer> STORE_ITEM_ID = createField(DSL.name("store_item_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>rpkit_stores.rpkit_permanent_store_item</code> table reference
     */
    public RpkitPermanentStoreItem() {
        this(DSL.name("rpkit_permanent_store_item"), null);
    }

    /**
     * Create an aliased <code>rpkit_stores.rpkit_permanent_store_item</code> table reference
     */
    public RpkitPermanentStoreItem(String alias) {
        this(DSL.name(alias), RPKIT_PERMANENT_STORE_ITEM);
    }

    /**
     * Create an aliased <code>rpkit_stores.rpkit_permanent_store_item</code> table reference
     */
    public RpkitPermanentStoreItem(Name alias) {
        this(alias, RPKIT_PERMANENT_STORE_ITEM);
    }

    private RpkitPermanentStoreItem(Name alias, Table<RpkitPermanentStoreItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitPermanentStoreItem(Name alias, Table<RpkitPermanentStoreItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RpkitPermanentStoreItem(Table<O> child, ForeignKey<O, RpkitPermanentStoreItemRecord> key) {
        super(child, key, RPKIT_PERMANENT_STORE_ITEM);
    }

    @Override
    public Schema getSchema() {
        return RpkitStores.RPKIT_STORES;
    }

    @Override
    public Identity<RpkitPermanentStoreItemRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RPKIT_PERMANENT_STORE_ITEM;
    }

    @Override
    public UniqueKey<RpkitPermanentStoreItemRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_PERMANENT_STORE_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<RpkitPermanentStoreItemRecord>> getKeys() {
        return Arrays.<UniqueKey<RpkitPermanentStoreItemRecord>>asList(Keys.KEY_RPKIT_PERMANENT_STORE_ITEM_PRIMARY);
    }

    @Override
    public RpkitPermanentStoreItem as(String alias) {
        return new RpkitPermanentStoreItem(DSL.name(alias), this);
    }

    @Override
    public RpkitPermanentStoreItem as(Name alias) {
        return new RpkitPermanentStoreItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitPermanentStoreItem rename(String name) {
        return new RpkitPermanentStoreItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitPermanentStoreItem rename(Name name) {
        return new RpkitPermanentStoreItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
