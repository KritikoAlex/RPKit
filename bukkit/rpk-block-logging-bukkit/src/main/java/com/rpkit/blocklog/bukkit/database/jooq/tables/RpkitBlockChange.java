/*
 * Copyright 2020 Ren Binden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.rpkit.blocklog.bukkit.database.jooq.tables;


import com.rpkit.blocklog.bukkit.database.jooq.Keys;
import com.rpkit.blocklog.bukkit.database.jooq.RpkitBlockLogging;
import com.rpkit.blocklog.bukkit.database.jooq.tables.records.RpkitBlockChangeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitBlockChange extends TableImpl<RpkitBlockChangeRecord> {

    private static final long serialVersionUID = 1399361713;

    /**
     * The reference instance of <code>rpkit_block_logging.rpkit_block_change</code>
     */
    public static final RpkitBlockChange RPKIT_BLOCK_CHANGE = new RpkitBlockChange();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitBlockChangeRecord> getRecordType() {
        return RpkitBlockChangeRecord.class;
    }

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.id</code>.
     */
    public final TableField<RpkitBlockChangeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.block_history_id</code>.
     */
    public final TableField<RpkitBlockChangeRecord, Integer> BLOCK_HISTORY_ID = createField(DSL.name("block_history_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.time</code>.
     */
    public final TableField<RpkitBlockChangeRecord, LocalDateTime> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.profile_id</code>.
     */
    public final TableField<RpkitBlockChangeRecord, Integer> PROFILE_ID = createField(DSL.name("profile_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.minecraft_profile_id</code>.
     */
    public final TableField<RpkitBlockChangeRecord, Integer> MINECRAFT_PROFILE_ID = createField(DSL.name("minecraft_profile_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.character_id</code>.
     */
    public final TableField<RpkitBlockChangeRecord, Integer> CHARACTER_ID = createField(DSL.name("character_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.from</code>.
     */
    public final TableField<RpkitBlockChangeRecord, String> FROM = createField(DSL.name("from"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.to</code>.
     */
    public final TableField<RpkitBlockChangeRecord, String> TO = createField(DSL.name("to"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>rpkit_block_logging.rpkit_block_change.reason</code>.
     */
    public final TableField<RpkitBlockChangeRecord, String> REASON = createField(DSL.name("reason"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>rpkit_block_logging.rpkit_block_change</code> table reference
     */
    public RpkitBlockChange() {
        this(DSL.name("rpkit_block_change"), null);
    }

    /**
     * Create an aliased <code>rpkit_block_logging.rpkit_block_change</code> table reference
     */
    public RpkitBlockChange(String alias) {
        this(DSL.name(alias), RPKIT_BLOCK_CHANGE);
    }

    /**
     * Create an aliased <code>rpkit_block_logging.rpkit_block_change</code> table reference
     */
    public RpkitBlockChange(Name alias) {
        this(alias, RPKIT_BLOCK_CHANGE);
    }

    private RpkitBlockChange(Name alias, Table<RpkitBlockChangeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitBlockChange(Name alias, Table<RpkitBlockChangeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RpkitBlockChange(Table<O> child, ForeignKey<O, RpkitBlockChangeRecord> key) {
        super(child, key, RPKIT_BLOCK_CHANGE);
    }

    @Override
    public Schema getSchema() {
        return RpkitBlockLogging.RPKIT_BLOCK_LOGGING;
    }

    @Override
    public Identity<RpkitBlockChangeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RPKIT_BLOCK_CHANGE;
    }

    @Override
    public UniqueKey<RpkitBlockChangeRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_BLOCK_CHANGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RpkitBlockChangeRecord>> getKeys() {
        return Arrays.<UniqueKey<RpkitBlockChangeRecord>>asList(Keys.KEY_RPKIT_BLOCK_CHANGE_PRIMARY);
    }

    @Override
    public RpkitBlockChange as(String alias) {
        return new RpkitBlockChange(DSL.name(alias), this);
    }

    @Override
    public RpkitBlockChange as(Name alias) {
        return new RpkitBlockChange(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitBlockChange rename(String name) {
        return new RpkitBlockChange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitBlockChange rename(Name name) {
        return new RpkitBlockChange(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, LocalDateTime, Integer, Integer, Integer, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
