/*
 * Copyright 2020 Ren Binden
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.rpkit.players.bukkit.database.jooq.tables.records;


import com.rpkit.players.bukkit.database.jooq.tables.RpkitProfile;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitProfileRecord extends UpdatableRecordImpl<RpkitProfileRecord> implements Record4<Integer, String, byte[], byte[]> {

    private static final long serialVersionUID = -1313456166;

    /**
     * Setter for <code>rpkit_players.rpkit_profile.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>rpkit_players.rpkit_profile.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>rpkit_players.rpkit_profile.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>rpkit_players.rpkit_profile.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>rpkit_players.rpkit_profile.password_hash</code>.
     */
    public void setPasswordHash(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>rpkit_players.rpkit_profile.password_hash</code>.
     */
    public byte[] getPasswordHash() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>rpkit_players.rpkit_profile.password_salt</code>.
     */
    public void setPasswordSalt(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>rpkit_players.rpkit_profile.password_salt</code>.
     */
    public byte[] getPasswordSalt() {
        return (byte[]) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, byte[], byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, byte[], byte[]> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return RpkitProfile.RPKIT_PROFILE.ID;
    }

    @Override
    public Field<String> field2() {
        return RpkitProfile.RPKIT_PROFILE.NAME;
    }

    @Override
    public Field<byte[]> field3() {
        return RpkitProfile.RPKIT_PROFILE.PASSWORD_HASH;
    }

    @Override
    public Field<byte[]> field4() {
        return RpkitProfile.RPKIT_PROFILE.PASSWORD_SALT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public byte[] component3() {
        return getPasswordHash();
    }

    @Override
    public byte[] component4() {
        return getPasswordSalt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public byte[] value3() {
        return getPasswordHash();
    }

    @Override
    public byte[] value4() {
        return getPasswordSalt();
    }

    @Override
    public RpkitProfileRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RpkitProfileRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public RpkitProfileRecord value3(byte[] value) {
        setPasswordHash(value);
        return this;
    }

    @Override
    public RpkitProfileRecord value4(byte[] value) {
        setPasswordSalt(value);
        return this;
    }

    @Override
    public RpkitProfileRecord values(Integer value1, String value2, byte[] value3, byte[] value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RpkitProfileRecord
     */
    public RpkitProfileRecord() {
        super(RpkitProfile.RPKIT_PROFILE);
    }

    /**
     * Create a detached, initialised RpkitProfileRecord
     */
    public RpkitProfileRecord(Integer id, String name, byte[] passwordHash, byte[] passwordSalt) {
        super(RpkitProfile.RPKIT_PROFILE);

        set(0, id);
        set(1, name);
        set(2, passwordHash);
        set(3, passwordSalt);
    }
}
