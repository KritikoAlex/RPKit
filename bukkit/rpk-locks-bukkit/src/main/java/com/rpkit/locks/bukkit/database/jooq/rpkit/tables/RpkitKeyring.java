/*
 * This file is generated by jOOQ.
*/
package com.rpkit.locks.bukkit.database.jooq.rpkit.tables;


import com.rpkit.locks.bukkit.database.jooq.rpkit.Keys;
import com.rpkit.locks.bukkit.database.jooq.rpkit.Rpkit;
import com.rpkit.locks.bukkit.database.jooq.rpkit.tables.records.RpkitKeyringRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RpkitKeyring extends TableImpl<RpkitKeyringRecord> {

    private static final long serialVersionUID = -1846870314;

    /**
     * The reference instance of <code>rpkit.rpkit_keyring</code>
     */
    public static final RpkitKeyring RPKIT_KEYRING = new RpkitKeyring();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RpkitKeyringRecord> getRecordType() {
        return RpkitKeyringRecord.class;
    }

    /**
     * The column <code>rpkit.rpkit_keyring.id</code>.
     */
    public final TableField<RpkitKeyringRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rpkit.rpkit_keyring.character_id</code>.
     */
    public final TableField<RpkitKeyringRecord, Integer> CHARACTER_ID = createField("character_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>rpkit.rpkit_keyring.items</code>.
     */
    public final TableField<RpkitKeyringRecord, byte[]> ITEMS = createField("items", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>rpkit.rpkit_keyring</code> table reference
     */
    public RpkitKeyring() {
        this("rpkit_keyring", null);
    }

    /**
     * Create an aliased <code>rpkit.rpkit_keyring</code> table reference
     */
    public RpkitKeyring(String alias) {
        this(alias, RPKIT_KEYRING);
    }

    private RpkitKeyring(String alias, Table<RpkitKeyringRecord> aliased) {
        this(alias, aliased, null);
    }

    private RpkitKeyring(String alias, Table<RpkitKeyringRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Rpkit.RPKIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RpkitKeyringRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RPKIT_KEYRING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RpkitKeyringRecord> getPrimaryKey() {
        return Keys.KEY_RPKIT_KEYRING_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RpkitKeyringRecord>> getKeys() {
        return Arrays.<UniqueKey<RpkitKeyringRecord>>asList(Keys.KEY_RPKIT_KEYRING_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RpkitKeyring as(String alias) {
        return new RpkitKeyring(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RpkitKeyring rename(String name) {
        return new RpkitKeyring(name, null);
    }
}
